nsq {
  # netty related settings
  epoll = false
  threads = 1
  max-content-length = 1048576
  reuse-address = false
  keep-alive = true
  tcp-no-delay = true
  snd-buf = 65536
  rcv-buf = 65536
  wb-low = 1024
  wb-high = 65536

  # connection pool settings
  max-connections = 1

  # indicate you are ready to receive N messages
  max-ready-count = 1

  # lookup settings
  lookup-period = 10m
  lookup-address = [
    "http://127.0.0.1:4161"
  ]

  # additional settings for nsq identify
  identify {

    # used to indicate that the client supports feature negotiation.
    # If the server is capable, it will send back a JSON payload of supported features and metadata.

    # feature-negotiation = false

    # milliseconds between heartbeats.
    # Valid range: 1000 <= heartbeat_interval <= configured_max (-1 disables heartbeats)
    # --max-heartbeat-interval (nsqd flag) controls the max
    # Defaults to --client-timeout / 2

    # heartbeat-interval = 10

    # the size in bytes of the buffer nsqd will use when writing to this client.
    # Valid range: 64 <= output_buffer_size <= configured_max (-1 disables output buffering)
    # --max-output-buffer-size (nsqd flag) controls the max
    # Defaults to 16kb

    # output-buffer-size = 16384

    # the timeout after which any data that nsqd has buffered will be flushed to this client.
    # Valid range: 1ms <= output_buffer_timeout <= configured_max (-1 disables timeouts)
    # --max-output-buffer-timeout (nsqd flag) controls the max
    # Defaults to 250ms

    # output-buffer-timeout = 250

    # enable TLS for this connection.
    # --tls-cert and --tls-key (nsqd flags) enable TLS and configure the server certificate
    # If the server supports TLS it will reply "tls_v1": true
    # The client should begin the TLS handshake immediately after reading the IDENTIFY response
    # The server will respond OK after completing the TLS handshake

    # tls-v1 = false

    # enable snappy compression for this connection.
    # --snappy (nsqd flag) enables support for this server side
    # The client should expect an additional, snappy compressed OK response immediately after the IDENTIFY response.
    # A client cannot enable both snappy and deflate.

    # snappy = false

    # enable deflate compression for this connection.
    # --deflate (nsqd flag) enables support for this server side
    # The client should expect an additional, deflate compressed OK response immediately after the IDENTIFY response.
    #  A client cannot enable both snappy and deflate.

    # deflate = false

    # configure the deflate compression level for this connection.
    # --max-deflate-level (nsqd flag) configures the maximum allowed value
    # Valid range: 1 <= deflate_level <= configured_max
    # Higher values mean better compression but more CPU usage for nsqd.

    # deflate-level = 1

    # deliver a percentage of all messages received to this connection.
    # Valid range: 0 <= sample_rate <= 99 (0 disables sampling)
    # Defaults to 0

    # sample-rate = 0

    # configure the server-side message timeout in milliseconds for messages delivered to this client.

    # msg-timeout = 3m
  }
}